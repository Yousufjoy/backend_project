import Joi from 'Joi'
import { LocalGurdian, Student, UserName, gurdian } from '../student.interface'
//Creating a schema validation using joi

// This code is generated by CHATGPT
const userNameSchema = Joi.object<UserName>({
  firstName: Joi.string()
    .max(20)
    .regex(/^[A-Z][a-z]*$/)
    .required()
    .messages({
      'string.base': 'First name should be a type of text',
      'string.empty': 'First name is required',
      'string.max': 'First name cannot be more than 20 characters',
      'any.required': 'First name is required',
      'string.pattern.base':
        'First name must start with an uppercase letter followed by lowercase letters',
    }),
  middleName: Joi.string().required().messages({
    'string.base': 'Middle name should be a type of text',
    'string.empty': 'Middle name is required',
    'any.required': 'Middle name is required',
  }),
  lastName: Joi.string()
    .regex(/^[A-Za-z]+$/)
    .required()
    .messages({
      'string.base': 'Last name should be a type of text',
      'string.empty': 'Last name is required',
      'any.required': 'Last name is required',
      'string.pattern.base': 'Last name can only contain alphabetic characters',
    }),
})

const gurdianSchema = Joi.object<gurdian>({
  fatherName: Joi.string().trim().required().messages({
    'string.base': 'Father name should be a type of text',
    'string.empty': 'Father name is required',
    'any.required': 'Father name is required',
  }),
  fatherOccupation: Joi.string().required().messages({
    'string.base': 'Father occupation should be a type of text',
    'string.empty': 'Father occupation is required',
    'any.required': 'Father occupation is required',
  }),
  fatherContactNo: Joi.string().required().messages({
    'string.base': 'Father contact number should be a type of text',
    'string.empty': 'Father contact number is required',
    'any.required': 'Father contact number is required',
  }),
  motherName: Joi.string().required().messages({
    'string.base': 'Mother name should be a type of text',
    'string.empty': 'Mother name is required',
    'any.required': 'Mother name is required',
  }),
  motherOccupation: Joi.string().required().messages({
    'string.base': 'Mother occupation should be a type of text',
    'string.empty': 'Mother occupation is required',
    'any.required': 'Mother occupation is required',
  }),
  motherContactNo: Joi.string().required().messages({
    'string.base': 'Mother contact number should be a type of text',
    'string.empty': 'Mother contact number is required',
    'any.required': 'Mother contact number is required',
  }),
})

const localGurdianSchema = Joi.object<LocalGurdian>({
  name: Joi.string().required().messages({
    'string.base': 'Local guardian name should be a type of text',
    'string.empty': 'Local guardian name is required',
    'any.required': 'Local guardian name is required',
  }),
  occupation: Joi.string().required().messages({
    'string.base': 'Local guardian occupation should be a type of text',
    'string.empty': 'Local guardian occupation is required',
    'any.required': 'Local guardian occupation is required',
  }),
  contactNo: Joi.string().required().messages({
    'string.base': 'Local guardian contact number should be a type of text',
    'string.empty': 'Local guardian contact number is required',
    'any.required': 'Local guardian contact number is required',
  }),
  address: Joi.string().required().messages({
    'string.base': 'Local guardian address should be a type of text',
    'string.empty': 'Local guardian address is required',
    'any.required': 'Local guardian address is required',
  }),
})

const studentSchema = Joi.object<Student>({
  id: Joi.string().required().messages({
    'string.base': 'Student ID should be a type of text',
    'string.empty': 'Student ID is required',
    'any.required': 'Student ID is required',
  }),
  name: userNameSchema.required(),
  gender: Joi.string().valid('male', 'female').required().messages({
    'string.base': 'Gender should be a type of text',
    'string.empty': 'Gender is required',
    'any.required': 'Gender is required',
    'any.only': '{#value} is not a valid gender',
  }),
  dateOfBirth: Joi.string().required().messages({
    'string.base': 'Date of birth should be a type of text',
    'string.empty': 'Date of birth is required',
    'any.required': 'Date of birth is required',
  }),
  email: Joi.string().email().required().messages({
    'string.base': 'Email should be a type of text',
    'string.empty': 'Email is required',
    'string.email': '{#value} is not a valid email',
    'any.required': 'Email is required',
  }),
  contactNo: Joi.string().required().messages({
    'string.base': 'Contact number should be a type of text',
    'string.empty': 'Contact number is required',
    'any.required': 'Contact number is required',
  }),
  emergencyContactNo: Joi.string().required().messages({
    'string.base': 'Emergency contact number should be a type of text',
    'string.empty': 'Emergency contact number is required',
    'any.required': 'Emergency contact number is required',
  }),
  bloodGroup: Joi.string()
    .valid('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-')
    .messages({
      'string.base': 'Blood group should be a type of text',
      'any.only': '{#value} is not a valid blood group',
    }),
  presentAddress: Joi.string().required().messages({
    'string.base': 'Present address should be a type of text',
    'string.empty': 'Present address is required',
    'any.required': 'Present address is required',
  }),
  parmanentAddress: Joi.string().required().messages({
    'string.base': 'Permanent address should be a type of text',
    'string.empty': 'Permanent address is required',
    'any.required': 'Permanent address is required',
  }),
  gurdian: gurdianSchema.required(),
  localGurdian: localGurdianSchema.required(),
  profileImage: Joi.string().messages({
    'string.base': 'Profile image should be a type of text',
  }),
  isActive: Joi.string().valid('active', 'blocked').default('active').messages({
    'string.base': 'Status should be a type of text',
    'any.only': '{#value} is not a valid status',
  }),
})

export default studentSchema
